type token =
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | SEMICOLUMN
  | SEQUENCE
  | ASSIGN
  | COLUMN
  | DOT
  | GREATER
  | GREATEREQUAL
  | SMALLER
  | SMALLEREQUAL
  | EQUAL
  | NOTEQUAL
  | AND
  | OR
  | NOT
  | IF
  | ELSE
  | FOR
  | WHILE
  | BREAK
  | CONTINUE
  | IN
  | RETURN
  | LINK
  | RIGHTLINK
  | LEFTLINK
  | SIMILARITY
  | AT
  | AMPERSAND
  | INT
  | FLOAT
  | STRING
  | BOOL
  | NODE
  | GRAPH
  | LIST
  | DICT
  | NULL
  | QUOTE
  | LEFTBRACKET
  | RIGHTBRACKET
  | LEFTCURLYBRACKET
  | RIGHTCURLYBRACKET
  | LEFTROUNDBRACKET
  | RIGHTROUNDBRACKET
  | EOF
  | ID of (string)
  | INT_LITERAL of (int)
  | STRING_LITERAL of (string)
  | FLOAT_LITERAL of (float)
  | BOOL_LITERAL of (bool)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
 open Ast 
# 63 "parser.ml"
let yytransl_const = [|
  257 (* PLUS *);
  258 (* MINUS *);
  259 (* TIMES *);
  260 (* DIVIDE *);
  261 (* MOD *);
  262 (* SEMICOLUMN *);
  263 (* SEQUENCE *);
  264 (* ASSIGN *);
  265 (* COLUMN *);
  266 (* DOT *);
  267 (* GREATER *);
  268 (* GREATEREQUAL *);
  269 (* SMALLER *);
  270 (* SMALLEREQUAL *);
  271 (* EQUAL *);
  272 (* NOTEQUAL *);
  273 (* AND *);
  274 (* OR *);
  275 (* NOT *);
  276 (* IF *);
  277 (* ELSE *);
  278 (* FOR *);
  279 (* WHILE *);
  280 (* BREAK *);
  281 (* CONTINUE *);
  282 (* IN *);
  283 (* RETURN *);
  284 (* LINK *);
  285 (* RIGHTLINK *);
  286 (* LEFTLINK *);
  287 (* SIMILARITY *);
  288 (* AT *);
  289 (* AMPERSAND *);
  290 (* INT *);
  291 (* FLOAT *);
  292 (* STRING *);
  293 (* BOOL *);
  294 (* NODE *);
  295 (* GRAPH *);
  296 (* LIST *);
  297 (* DICT *);
  298 (* NULL *);
  299 (* QUOTE *);
  300 (* LEFTBRACKET *);
  301 (* RIGHTBRACKET *);
  302 (* LEFTCURLYBRACKET *);
  303 (* RIGHTCURLYBRACKET *);
  304 (* LEFTROUNDBRACKET *);
  305 (* RIGHTROUNDBRACKET *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  306 (* ID *);
  307 (* INT_LITERAL *);
  308 (* STRING_LITERAL *);
  309 (* FLOAT_LITERAL *);
  310 (* BOOL_LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\006\000\006\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\009\000\009\000\009\000\010\000\005\000\007\000\007\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\014\000\014\000\014\000\016\000\016\000\017\000\
\018\000\015\000\015\000\015\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\011\000\
\011\000\011\000\011\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\001\000\003\000\011\000\011\000\
\007\000\007\000\002\000\002\000\004\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\004\000\004\000\004\000\004\000\
\004\000\000\000\001\000\003\000\002\000\008\000\000\000\001\000\
\001\000\001\000\001\000\004\000\001\000\003\000\003\000\003\000\
\003\000\004\000\000\000\001\000\003\000\003\000\005\000\003\000\
\003\000\000\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\003\000\004\000\003\000\003\000\003\000\
\005\000\003\000\003\000\005\000\003\000\003\000\005\000\001\000\
\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\084\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\015\000\016\000\017\000\000\000\019\000\
\020\000\000\000\000\000\000\000\000\000\001\000\000\000\080\000\
\082\000\081\000\083\000\003\000\000\000\005\000\000\000\000\000\
\033\000\034\000\035\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
\000\000\000\000\018\000\000\000\000\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
\000\000\040\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\072\000\000\000\075\000\000\000\
\078\000\068\000\000\000\070\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000\021\000\022\000\023\000\024\000\025\000\
\000\000\000\000\052\000\042\000\000\000\000\000\000\000\000\000\
\000\000\069\000\000\000\000\000\000\000\027\000\002\000\000\000\
\000\000\002\000\000\000\000\000\048\000\000\000\000\000\000\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\028\000\002\000\000\000\000\000\010\000\000\000\000\000\000\000\
\000\000\000\000\030\000\002\000\002\000\000\000\000\000\008\000\
\007\000"

let yydgoto = "\002\000\
\003\000\004\000\028\000\029\000\030\000\031\000\145\000\032\000\
\141\000\142\000\033\000\034\000\035\000\046\000\048\000\134\000\
\109\000\049\000"

let yysindex = "\026\000\
\000\000\000\000\000\000\041\000\144\000\144\000\225\254\236\254\
\238\254\144\000\000\000\000\000\000\000\000\000\242\254\000\000\
\000\000\029\255\144\000\239\254\144\000\000\000\031\255\000\000\
\000\000\000\000\000\000\000\000\204\003\000\000\081\255\243\254\
\000\000\000\000\000\000\242\254\241\255\002\000\144\000\241\254\
\144\000\236\003\144\000\232\254\002\004\255\254\080\255\069\255\
\000\000\255\000\144\000\144\000\144\000\144\000\144\000\144\000\
\144\000\000\000\144\000\144\000\144\000\144\000\144\000\144\000\
\144\000\144\000\162\000\162\000\162\000\144\000\075\255\000\000\
\072\255\021\001\000\000\086\255\028\255\060\001\000\000\082\001\
\070\255\082\255\085\255\089\255\095\255\144\000\000\000\144\000\
\239\254\000\000\000\000\002\004\254\254\241\255\241\255\002\000\
\002\000\002\000\200\255\200\255\200\255\200\255\046\004\046\004\
\024\004\024\004\144\000\207\000\000\000\222\000\000\000\012\001\
\000\000\000\000\144\000\000\000\144\000\241\254\049\255\144\000\
\107\255\056\255\000\000\000\000\000\000\000\000\000\000\000\000\
\002\004\002\004\000\000\000\000\138\003\092\255\144\000\144\000\
\144\000\000\000\002\004\061\255\006\255\000\000\000\000\002\004\
\116\255\000\000\144\000\144\000\000\000\002\000\002\000\002\000\
\000\000\241\254\100\255\133\255\144\000\173\255\002\004\171\003\
\000\000\000\000\121\255\101\255\000\000\144\000\214\255\105\255\
\111\255\002\004\000\000\000\000\000\000\081\000\121\000\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\097\255\000\000\
\000\000\000\000\094\255\083\255\000\000\000\000\216\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\179\002\121\001\000\000\000\000\
\000\000\000\000\000\000\000\000\024\255\000\000\000\000\000\000\
\000\000\000\000\000\000\022\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\143\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\255\000\000\202\002\251\002\144\001\
\193\001\216\001\226\002\018\003\041\003\064\003\077\003\099\003\
\091\255\112\003\094\255\104\002\000\000\130\002\000\000\153\002\
\000\000\000\000\000\000\000\000\000\000\026\255\000\000\152\255\
\143\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\255\084\255\000\000\000\000\096\255\000\000\000\000\000\000\
\000\000\000\000\155\255\000\000\000\000\000\000\000\000\250\254\
\000\000\000\000\000\000\000\000\000\000\009\002\032\002\081\002\
\000\000\000\000\000\000\000\000\115\255\000\000\098\255\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\103\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\016\000\000\000\253\255\000\000\125\000\009\000\220\255\
\000\000\022\000\000\000\000\000\000\000\130\000\000\000\000\000\
\196\255\101\000"

let yytablesize = 1358
let yytable = "\032\000\
\009\000\037\000\038\000\077\000\086\000\086\000\042\000\111\000\
\113\000\081\000\082\000\083\000\154\000\084\000\085\000\045\000\
\039\000\050\000\011\000\012\000\013\000\014\000\075\000\016\000\
\017\000\018\000\001\000\040\000\043\000\041\000\044\000\045\000\
\026\000\043\000\047\000\074\000\073\000\078\000\051\000\080\000\
\022\000\044\000\032\000\087\000\038\000\038\000\132\000\092\000\
\045\000\094\000\095\000\096\000\097\000\098\000\155\000\099\000\
\100\000\101\000\102\000\103\000\104\000\105\000\106\000\108\000\
\110\000\112\000\114\000\116\000\044\000\045\000\043\000\038\000\
\044\000\045\000\026\000\089\000\005\000\121\000\052\000\117\000\
\124\000\140\000\129\000\038\000\130\000\038\000\072\000\038\000\
\088\000\050\000\049\000\120\000\125\000\006\000\143\000\126\000\
\063\000\063\000\148\000\127\000\043\000\146\000\044\000\133\000\
\046\000\128\000\115\000\063\000\063\000\047\000\153\000\138\000\
\036\000\139\000\117\000\090\000\144\000\140\000\019\000\118\000\
\020\000\157\000\021\000\063\000\023\000\024\000\025\000\026\000\
\027\000\050\000\049\000\150\000\151\000\152\000\005\000\063\000\
\149\000\063\000\043\000\063\000\044\000\168\000\046\000\159\000\
\160\000\162\000\018\000\047\000\012\000\169\000\172\000\006\000\
\007\000\144\000\008\000\009\000\173\000\031\000\156\000\010\000\
\013\000\158\000\170\000\031\000\076\000\164\000\011\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\005\000\161\000\
\019\000\167\000\020\000\163\000\021\000\093\000\023\000\024\000\
\025\000\026\000\027\000\174\000\175\000\131\000\000\000\006\000\
\007\000\000\000\008\000\009\000\000\000\000\000\000\000\010\000\
\053\000\054\000\055\000\056\000\057\000\000\000\011\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\000\000\005\000\
\019\000\000\000\020\000\165\000\021\000\000\000\023\000\024\000\
\025\000\026\000\027\000\067\000\068\000\069\000\070\000\071\000\
\006\000\007\000\000\000\008\000\009\000\000\000\000\000\000\000\
\010\000\000\000\000\000\055\000\056\000\057\000\000\000\011\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\000\000\
\000\000\019\000\009\000\020\000\171\000\021\000\000\000\023\000\
\024\000\025\000\026\000\027\000\067\000\068\000\069\000\070\000\
\071\000\000\000\000\000\009\000\009\000\000\000\009\000\009\000\
\000\000\000\000\000\000\009\000\000\000\067\000\068\000\069\000\
\070\000\071\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\005\000\000\000\009\000\000\000\009\000\009\000\
\009\000\000\000\009\000\009\000\009\000\009\000\009\000\000\000\
\000\000\000\000\000\000\006\000\007\000\000\000\008\000\009\000\
\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\005\000\000\000\019\000\000\000\020\000\000\000\
\021\000\000\000\023\000\024\000\025\000\026\000\027\000\000\000\
\000\000\000\000\000\000\006\000\007\000\000\000\008\000\009\000\
\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\005\000\000\000\019\000\000\000\020\000\176\000\
\021\000\000\000\023\000\024\000\025\000\026\000\027\000\000\000\
\000\000\000\000\000\000\006\000\007\000\000\000\008\000\009\000\
\000\000\005\000\000\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\006\000\005\000\019\000\000\000\020\000\177\000\
\021\000\000\000\023\000\024\000\025\000\026\000\027\000\000\000\
\000\000\000\000\000\000\000\000\006\000\036\000\000\000\000\000\
\000\000\000\000\000\000\019\000\000\000\020\000\000\000\021\000\
\000\000\023\000\024\000\025\000\026\000\027\000\000\000\036\000\
\000\000\000\000\000\000\000\000\000\000\107\000\000\000\020\000\
\000\000\021\000\000\000\023\000\024\000\025\000\026\000\027\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\000\000\
\000\000\000\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\067\000\068\000\069\000\070\000\071\000\135\000\
\000\000\000\000\000\000\037\000\037\000\037\000\037\000\037\000\
\037\000\067\000\068\000\069\000\070\000\071\000\136\000\053\000\
\054\000\055\000\056\000\057\000\037\000\000\000\037\000\000\000\
\037\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\000\000\000\000\000\000\000\000\053\000\054\000\055\000\
\056\000\057\000\067\000\068\000\069\000\070\000\071\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\137\000\000\000\000\000\091\000\
\067\000\068\000\069\000\070\000\071\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\054\000\055\000\056\000\
\057\000\000\000\000\000\000\000\000\000\119\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\000\000\000\000\
\000\000\000\000\053\000\054\000\055\000\056\000\057\000\067\000\
\068\000\069\000\070\000\071\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\122\000\067\000\068\000\069\000\
\070\000\071\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\000\000\000\000\123\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\000\000\000\000\000\000\000\000\000\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\000\000\
\000\000\066\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\000\000\000\000\000\000\066\000\000\000\066\000\
\000\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\055\000\000\000\055\000\000\000\
\055\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\000\000\000\000\000\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\000\000\000\000\000\000\000\000\000\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\000\000\
\000\000\056\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\000\000\000\000\000\000\056\000\000\000\056\000\
\000\000\056\000\000\000\000\000\000\000\000\000\000\000\000\000\
\064\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\064\000\000\000\064\000\000\000\
\064\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\000\000\000\000\000\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\000\000\000\000\000\000\000\000\000\000\
\076\000\076\000\076\000\076\000\076\000\076\000\076\000\000\000\
\000\000\073\000\076\000\076\000\076\000\076\000\076\000\076\000\
\076\000\076\000\000\000\000\000\000\000\073\000\000\000\073\000\
\000\000\073\000\000\000\000\000\000\000\000\000\000\000\000\000\
\076\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\076\000\000\000\076\000\000\000\
\076\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\000\000\000\000\000\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\079\000\000\000\000\000\000\000\000\000\000\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\000\000\
\000\000\079\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\000\000\000\000\000\000\079\000\000\000\079\000\
\000\000\079\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\000\000\000\000\000\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\071\000\000\000\071\000\000\000\
\071\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
\000\000\000\000\000\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\000\000\000\000\000\000\074\000\000\000\
\074\000\000\000\074\000\067\000\067\000\000\000\000\000\000\000\
\067\000\067\000\000\000\000\000\000\000\067\000\067\000\067\000\
\067\000\067\000\067\000\067\000\067\000\077\000\000\000\077\000\
\000\000\077\000\053\000\053\000\000\000\000\000\000\000\053\000\
\053\000\000\000\000\000\067\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\000\000\000\000\000\000\067\000\
\000\000\067\000\000\000\067\000\000\000\000\000\000\000\061\000\
\061\000\000\000\053\000\000\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\000\000\000\000\053\000\000\000\
\053\000\000\000\053\000\054\000\054\000\000\000\000\000\000\000\
\054\000\054\000\061\000\000\000\000\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\000\000\061\000\000\000\
\061\000\000\000\061\000\000\000\000\000\000\000\000\000\062\000\
\062\000\000\000\000\000\054\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\000\000\000\000\000\000\054\000\
\000\000\054\000\000\000\054\000\000\000\000\000\059\000\059\000\
\000\000\000\000\062\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\000\000\000\000\000\000\062\000\000\000\
\062\000\000\000\062\000\000\000\000\000\060\000\060\000\000\000\
\000\000\059\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\057\000\057\000\000\000\059\000\000\000\059\000\
\000\000\059\000\000\000\057\000\057\000\057\000\057\000\000\000\
\060\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\058\000\058\000\000\000\000\000\060\000\057\000\060\000\000\000\
\060\000\058\000\058\000\058\000\058\000\065\000\065\000\000\000\
\000\000\057\000\000\000\057\000\000\000\057\000\000\000\000\000\
\065\000\065\000\000\000\058\000\000\000\000\000\000\000\000\000\
\000\000\000\000\053\000\054\000\055\000\056\000\057\000\058\000\
\065\000\058\000\000\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\065\000\000\000\065\000\000\000\
\065\000\000\000\000\000\000\000\000\000\067\000\068\000\069\000\
\070\000\071\000\147\000\053\000\054\000\055\000\056\000\057\000\
\000\000\000\000\000\000\000\000\000\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\067\000\068\000\
\069\000\070\000\071\000\166\000\053\000\054\000\055\000\056\000\
\057\000\058\000\000\000\000\000\000\000\000\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\068\000\069\000\070\000\071\000\053\000\054\000\055\000\056\000\
\057\000\079\000\000\000\000\000\000\000\000\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\000\000\000\000\
\000\000\000\000\053\000\054\000\055\000\056\000\057\000\067\000\
\068\000\069\000\070\000\071\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\000\000\000\000\000\000\000\000\
\053\000\054\000\055\000\056\000\057\000\067\000\068\000\069\000\
\070\000\071\000\059\000\060\000\061\000\062\000\063\000\064\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\054\000\
\055\000\056\000\057\000\067\000\068\000\069\000\070\000\071\000\
\059\000\060\000\061\000\062\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\067\000\068\000\069\000\070\000\071\000"

let yycheck = "\006\001\
\000\000\005\000\006\000\040\000\007\001\007\001\010\000\068\000\
\069\000\034\001\035\001\036\001\007\001\038\001\039\001\019\000\
\048\001\021\000\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\001\000\048\001\007\001\048\001\007\001\007\001\
\007\001\048\001\052\001\039\000\050\001\041\000\008\001\043\000\
\000\000\013\001\049\001\045\001\006\001\007\001\049\001\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\049\001\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\045\001\045\001\049\001\033\001\
\049\001\049\001\049\001\007\001\002\001\050\001\048\001\008\001\
\011\001\118\000\086\000\045\001\088\000\047\001\006\001\049\001\
\009\001\007\001\007\001\006\001\011\001\019\001\046\001\011\001\
\006\001\007\001\007\001\011\001\007\001\046\001\007\001\107\000\
\007\001\011\001\032\001\017\001\018\001\007\001\050\001\115\000\
\038\001\117\000\008\001\047\001\120\000\154\000\044\001\048\001\
\046\001\006\001\048\001\033\001\050\001\051\001\052\001\053\001\
\054\001\047\001\047\001\135\000\136\000\137\000\002\001\045\001\
\045\001\047\001\045\001\049\001\045\001\021\001\045\001\147\000\
\148\000\046\001\050\001\045\001\006\001\049\001\046\001\019\001\
\020\001\157\000\022\001\023\001\046\001\006\001\143\000\027\001\
\006\001\146\000\166\000\049\001\040\000\157\000\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\002\001\154\000\
\044\001\162\000\046\001\047\001\048\001\052\000\050\001\051\001\
\052\001\053\001\054\001\172\000\173\000\089\000\255\255\019\001\
\020\001\255\255\022\001\023\001\255\255\255\255\255\255\027\001\
\001\001\002\001\003\001\004\001\005\001\255\255\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\255\255\002\001\
\044\001\255\255\046\001\047\001\048\001\255\255\050\001\051\001\
\052\001\053\001\054\001\028\001\029\001\030\001\031\001\032\001\
\019\001\020\001\255\255\022\001\023\001\255\255\255\255\255\255\
\027\001\255\255\255\255\003\001\004\001\005\001\255\255\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\255\255\044\001\002\001\046\001\047\001\048\001\255\255\050\001\
\051\001\052\001\053\001\054\001\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\019\001\020\001\255\255\022\001\023\001\
\255\255\255\255\255\255\027\001\255\255\028\001\029\001\030\001\
\031\001\032\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\002\001\255\255\044\001\255\255\046\001\047\001\
\048\001\255\255\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\022\001\023\001\
\255\255\255\255\255\255\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\002\001\255\255\044\001\255\255\046\001\255\255\
\048\001\255\255\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\022\001\023\001\
\255\255\255\255\255\255\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\002\001\255\255\044\001\255\255\046\001\047\001\
\048\001\255\255\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\022\001\023\001\
\255\255\002\001\255\255\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\019\001\002\001\044\001\255\255\046\001\047\001\
\048\001\255\255\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\255\255\255\255\255\255\019\001\038\001\255\255\255\255\
\255\255\255\255\255\255\044\001\255\255\046\001\255\255\048\001\
\255\255\050\001\051\001\052\001\053\001\054\001\255\255\038\001\
\255\255\255\255\255\255\255\255\255\255\044\001\255\255\046\001\
\255\255\048\001\255\255\050\001\051\001\052\001\053\001\054\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\028\001\029\001\030\001\031\001\032\001\033\001\001\001\
\002\001\003\001\004\001\005\001\045\001\255\255\047\001\255\255\
\049\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\001\001\002\001\003\001\
\004\001\005\001\028\001\029\001\030\001\031\001\032\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\255\255\049\001\
\028\001\029\001\030\001\031\001\032\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\255\255\049\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\028\001\
\029\001\030\001\031\001\032\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\028\001\029\001\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\049\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\033\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\045\001\255\255\047\001\
\255\255\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\045\001\255\255\047\001\255\255\
\049\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\033\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\045\001\255\255\047\001\
\255\255\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\045\001\255\255\047\001\255\255\
\049\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\033\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\045\001\255\255\047\001\
\255\255\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\045\001\255\255\047\001\255\255\
\049\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\033\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\045\001\255\255\047\001\
\255\255\049\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\255\255\255\255\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\045\001\255\255\047\001\255\255\
\049\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\045\001\255\255\
\047\001\255\255\049\001\001\001\002\001\255\255\255\255\255\255\
\006\001\007\001\255\255\255\255\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\045\001\255\255\047\001\
\255\255\049\001\001\001\002\001\255\255\255\255\255\255\006\001\
\007\001\255\255\255\255\033\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\045\001\
\255\255\047\001\255\255\049\001\255\255\255\255\255\255\006\001\
\007\001\255\255\033\001\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\045\001\255\255\
\047\001\255\255\049\001\001\001\002\001\255\255\255\255\255\255\
\006\001\007\001\033\001\255\255\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\045\001\255\255\
\047\001\255\255\049\001\255\255\255\255\255\255\255\255\006\001\
\007\001\255\255\255\255\033\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\045\001\
\255\255\047\001\255\255\049\001\255\255\255\255\006\001\007\001\
\255\255\255\255\033\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\045\001\255\255\
\047\001\255\255\049\001\255\255\255\255\006\001\007\001\255\255\
\255\255\033\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\006\001\007\001\255\255\045\001\255\255\047\001\
\255\255\049\001\255\255\015\001\016\001\017\001\018\001\255\255\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\006\001\007\001\255\255\255\255\045\001\033\001\047\001\255\255\
\049\001\015\001\016\001\017\001\018\001\006\001\007\001\255\255\
\255\255\045\001\255\255\047\001\255\255\049\001\255\255\255\255\
\017\001\018\001\255\255\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\045\001\
\033\001\047\001\255\255\049\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\045\001\255\255\047\001\255\255\
\049\001\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\028\001\029\001\
\030\001\031\001\032\001\033\001\001\001\002\001\003\001\004\001\
\005\001\006\001\255\255\255\255\255\255\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\032\001\001\001\002\001\003\001\004\001\
\005\001\006\001\255\255\255\255\255\255\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\028\001\
\029\001\030\001\031\001\032\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\028\001\029\001\030\001\
\031\001\032\001\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\004\001\005\001\028\001\029\001\030\001\031\001\032\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  SEMICOLUMN\000\
  SEQUENCE\000\
  ASSIGN\000\
  COLUMN\000\
  DOT\000\
  GREATER\000\
  GREATEREQUAL\000\
  SMALLER\000\
  SMALLEREQUAL\000\
  EQUAL\000\
  NOTEQUAL\000\
  AND\000\
  OR\000\
  NOT\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  BREAK\000\
  CONTINUE\000\
  IN\000\
  RETURN\000\
  LINK\000\
  RIGHTLINK\000\
  LEFTLINK\000\
  SIMILARITY\000\
  AT\000\
  AMPERSAND\000\
  INT\000\
  FLOAT\000\
  STRING\000\
  BOOL\000\
  NODE\000\
  GRAPH\000\
  LIST\000\
  DICT\000\
  NULL\000\
  QUOTE\000\
  LEFTBRACKET\000\
  RIGHTBRACKET\000\
  LEFTCURLYBRACKET\000\
  RIGHTCURLYBRACKET\000\
  LEFTROUNDBRACKET\000\
  RIGHTROUNDBRACKET\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  INT_LITERAL\000\
  STRING_LITERAL\000\
  FLOAT_LITERAL\000\
  BOOL_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 61 "parser.mly"
                                        ( List.rev _1 )
# 649 "parser.ml"
               :  Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
                                        ( [] )
# 655 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 65 "parser.mly"
                                        ( _2 :: _1 )
# 663 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
                                        ( Expr(_1) )
# 670 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_decl) in
    Obj.repr(
# 69 "parser.mly"
                                        ( Func(_1) )
# 677 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                                        ( Return(_2) )
# 684 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'var_decl) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'for_expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'for_expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 72 "parser.mly"
  (For(_3, _5, _7, List.rev _10))
# 694 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'stmt_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 74 "parser.mly"
  (If(_3,List.rev _6,List.rev _10))
# 703 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 76 "parser.mly"
  (If(_3,List.rev _6,[]))
# 711 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 78 "parser.mly"
  (While(_3, List.rev _6))
# 719 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_decl) in
    Obj.repr(
# 79 "parser.mly"
                                        ( Var_dec(_1))
# 726 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 82 "parser.mly"
                           ( Local(_1, _2, Noexpr) )
# 734 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                           ( Local(_1, _2, _4) )
# 743 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                (Int_t)
# 749 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
                (Float_t)
# 755 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                 (String_t)
# 761 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
       (Bool_t)
# 767 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
       (Node_t)
# 773 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
        (Graph_t)
# 779 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
       (List_t)
# 785 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
                           (Dict_Int_t)
# 791 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
                             (Dict_Float_t)
# 797 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                              (Dict_String_t)
# 803 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
                            (Dict_Node_t)
# 809 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                             (Dict_Graph_t)
# 815 "parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
                              ( [] )
# 821 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 101 "parser.mly"
                              ( [_1] )
# 828 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 102 "parser.mly"
                              ( _3 :: _1 )
# 836 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "parser.mly"
                        ( Formal(_1, _2) )
# 844 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formal_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 109 "parser.mly"
                                                                                                          (
  {
    returnType = _1;
    name = _2;
    args = List.rev _4;
    body = List.rev _7;
  }
)
# 861 "parser.ml"
               : 'func_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
                                        ( Noexpr )
# 867 "parser.ml"
               : 'for_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                                        ( _1 )
# 874 "parser.ml"
               : 'for_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literals) in
    Obj.repr(
# 125 "parser.mly"
           (_1)
# 881 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith_ops) in
    Obj.repr(
# 126 "parser.mly"
                                  ( _1 )
# 888 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'graph_ops) in
    Obj.repr(
# 127 "parser.mly"
                                  ( _1 )
# 895 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                                               ( Node(_3) )
# 902 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 129 "parser.mly"
                              ( Id(_1) )
# 909 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                              ( Assign(_1, _3) )
# 917 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 131 "parser.mly"
                                     ( ListP(List.rev _2) )
# 924 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dict) in
    Obj.repr(
# 132 "parser.mly"
                                           ( DictP(List.rev _2) )
# 931 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                                           ( _2 )
# 938 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 134 "parser.mly"
                                                          ( Call(_1, _3) )
# 946 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "parser.mly"
                                        ( [] )
# 952 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                                        ( [_1] )
# 959 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                                        ( _3 :: _1 )
# 967 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                              ( { graphs = [_3]; edges = [_1] } )
# 975 "parser.ml"
               : 'list_graph))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'list_graph) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
    ( { graphs = _5 :: (_1).graphs; edges = _3 :: (_1).edges } )
# 984 "parser.ml"
               : 'list_graph))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_graph) in
    Obj.repr(
# 148 "parser.mly"
                                        (
  { graphs = List.rev (_2).graphs; edges = List.rev (_2).edges }
)
# 993 "parser.ml"
               : 'list_graph_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 153 "parser.mly"
                             ( (String_Lit(_1), _3) )
# 1001 "parser.ml"
               : 'dict_key_value))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
                                    ( [] )
# 1007 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dict_key_value) in
    Obj.repr(
# 158 "parser.mly"
                             ( [_1] )
# 1014 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dict) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dict_key_value) in
    Obj.repr(
# 159 "parser.mly"
                                  (_3 :: _1)
# 1022 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
                              ( Binop(_1, Add,   _3) )
# 1030 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "parser.mly"
                              ( Binop(_1, Sub,   _3) )
# 1038 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
                              ( Binop(_1, Mult,  _3) )
# 1046 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 165 "parser.mly"
                              ( Binop(_1, Div,   _3) )
# 1054 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                              ( Binop(_1, Equal, _3) )
# 1062 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
                              ( Binop(_1, Neq,   _3) )
# 1070 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                              ( Binop(_1, Less,  _3) )
# 1078 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
                              ( Binop(_1, Leq,   _3) )
# 1086 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
                              ( Binop(_1, Greater,  _3) )
# 1094 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
                              ( Binop(_1, Geq,   _3) )
# 1102 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
                              ( Binop(_1, And,   _3) )
# 1110 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
                              ( Binop(_1, Mod,   _3) )
# 1118 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "parser.mly"
                                  ( Binop(_1, Or,    _3) )
# 1126 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                           ( Unop (Not,   _2) )
# 1133 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 176 "parser.mly"
                            ( Unop (Sub, _2) )
# 1140 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
                                  ( Binop(_1, RootAs, _3) )
# 1148 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "parser.mly"
                                  ( Binop(_1, ListEdgesAt, _4) )
# 1156 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
                                  ( Binop(_1, ListNodesAt, _3) )
# 1164 "parser.ml"
               : 'arith_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                                      ( Graph_Link(_1, Double_Link, _3, Null) )
# 1172 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_graph_literal) in
    Obj.repr(
# 183 "parser.mly"
                                      ( Graph_Link(_1, Double_Link, ListP((_3).graphs), ListP((_3).edges)) )
# 1180 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 184 "parser.mly"
                                      ( Graph_Link(_1, Double_Link, _5, _3) )
# 1189 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
                                      ( Graph_Link(_1, Right_Link, _3, Null) )
# 1197 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_graph_literal) in
    Obj.repr(
# 186 "parser.mly"
                                      ( Graph_Link(_1, Right_Link, ListP((_3).graphs), ListP((_3).edges)) )
# 1205 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
                                      ( Graph_Link(_1, Right_Link, _5, _3) )
# 1214 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 188 "parser.mly"
                                      ( Graph_Link(_1, Left_Link, _3, Null) )
# 1222 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_graph_literal) in
    Obj.repr(
# 189 "parser.mly"
                                      ( Graph_Link(_1, Left_Link, ListP((_3).graphs), ListP((_3).edges)) )
# 1230 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 190 "parser.mly"
                                      ( Graph_Link(_1, Left_Link, _5, _3) )
# 1239 "parser.ml"
               : 'graph_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 193 "parser.mly"
                    (Num_Lit( Num_Int(_1) ))
# 1246 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 194 "parser.mly"
                    (Num_Lit( Num_Float(_1) ))
# 1253 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 195 "parser.mly"
                     (String_Lit(_1) )
# 1260 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 196 "parser.mly"
                     (Bool_lit(_1) )
# 1267 "parser.ml"
               : 'literals))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Ast.program)
